plugins {
    id "com.google.protobuf" version "0.9.4"
    id 'application'
    id 'java'
}

group = 'com.demo.grpc'
version = '1.0-SNAPSHOT'

application{
    //mainClass = 'com.demo.app.AccountClient'//when using client.Dockerfile
    //mainClass='com.demo.app.AccountService' //when using server.Dockerfile
}
repositories {
    mavenCentral()
}

sourceSets {
    main{
        java{
            srcDir 'build/generated/source/proto/main/grpc'
            srcDir 'build/generated/source/proto/main/java'
        }
    }
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'

    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    // https://mvnrepository.com/artifact/com.google.protobuf/protobuf-java
    implementation group: 'com.google.protobuf', name: 'protobuf-java', version: '4.27.1'

    // https://mvnrepository.com/artifact/io.grpc/grpc-all
    implementation group: 'io.grpc', name: 'grpc-all', version: '1.64.0'
}

protobuf {
    // Configure the protoc executable
    protoc {
        // Download from repositories
        artifact = 'com.google.protobuf:protoc:4.27.1'
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.64.1'
        }
    }

    generateProtoTasks {
        all().each {task ->
            task.plugins {
                grpc{}
            }
        }
    }
}

test {
    useJUnitPlatform()
}

// Task to run the server
task runServer(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.demo.app.AccountServiceImpl'
}

// Task to run the client
task runClient(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.demo.app.AccountClient'
}

//Task to run the test
task runServiceTest(type: JavaExec){
    classpath = sourceSets.main.runtimeClasspath
    main='com.demo.app.AccountServiceTest'
}